// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";


package istio.oidc.v1alpha1;

option go_package = "istio.io/api/oidc/v1alpha1";

message Policy {
    // List rules to select workloads that the policy should be applied on.
    // If empty, policy will be used on all workloads in the same namespace.
    repeated TargetSelector targets = 1;

    repeated IdentityProvider idps = 2;

    string authentication_callback = 3;

    string landing_page = 4;

    TokenBinding binding  = 5;
}

message TokenBinding {
    // The 256-bit base64 encoded shared secret used to validate cryptographic session token bindings.
    string secret = 1;
    // [(validate.rules).string.min_bytes = 44, (validate.rules).string.max_bytes = 44];
    // The name of the session token cookie. It is recommended that this value start with
    // the string "__Secure-" as described at
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie.
    string token = 2;
    // The name of the header that includes the cryptographic session token binding. A good choices
    // for this field are x-xsrf-token or x-csrf-token
    string binding = 3;
}

// TargetSelector defines a matching rule to a workload. A workload is selected
// if it is associated with the service name and service port(s) specified in the selector rule.
message TargetSelector {
    // REQUIRED. The name must be a short name from the service registry. The
    // fully qualified domain name will be resolved in a platform specific manner.
    string name = 1;

    // Specifies the ports. Note that this is the port(s) exposed by the service, not workload ports.
    // For example, if a service is defined as below, then `8000` should be used, not `9000`.
    // ```
    // kind: Service
    // metadata:
    //   ...
    // spec:
    //   ports:
    //   - name: http
    //     port: 8000
    //     targetPort: 9000
    //   selector:
    //     app: backend
    // ```
    //Leave empty to match all ports that are exposed.
    repeated PortSelector ports = 2;
}

// PortSelector specifies the name or number of a port to be used for
// matching targets for authentication policy. This is copied from
// networking API to avoid dependency.
message PortSelector {
    oneof port {
        // Valid port number
        uint32 number = 1;
        // Port name
        string name = 2;
    }
}

message IdentityProvider {
    Idp idp = 1;
}

message Idp {
    Criteria criteria = 1;
    IdpConfigs configs = 2;
}

message Criteria {
    // Match by 1) a header and 2) the value of the header
    string header = 1;
    string value = 2;
}

message IdpConfigs {
    string authorizationEndpoint = 1;
    string tokenEndpoint = 2;
    string jwksUri = 3;
    string clientId = 4;
    string clientSecret = 5;
}